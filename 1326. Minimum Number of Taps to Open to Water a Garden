There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).
There are n + 1 taps located at points [0, 1, ..., n] in the garden.
Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.
Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.

Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]

Solution -------->

In this first we declare the min and max as 0.
then we run the while loop till max is greater than n.
in this applying for loop we check the required condition that is [i - ranges[i], i + ranges[i]] if it is met we change the max to i+ranges[i].
if after for loop gives min ==max that means no tap can fill the garden.
otherwise change the min to max and increase the count.

Code------------>
class minTapss{
    public static void main(String[] args) {
        int [] ranges = {1,2,1,0,2,1,0,1};
        int n =7;
        System.out.println(minTaps(ranges,n));
    }

    private static int minTaps(int[] ranges, int n) {
        int min =0;
        int max =0;
        int count=0;
        int lastTap=0;

        while(max<n){
            for(int i =lastTap;i<=n;i++){
                if(i-ranges[i]<=min && i+ranges[i]>max){
                    lastTap=i;
                    max=i+ranges[i];
                }
            }
            if(min==max){
                return -1;
            }
            min=max;
            count++;
        }
        return count;
    }
}
